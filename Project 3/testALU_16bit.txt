#> InputSetLoader: gvFormat.InputSetLoaderSimpleGVFormat

###########################################################################
#
# Starter test file for ALU. (You need to add some more of your own tests.)
#
# Author: Zachary Kurmas
# (C) 2012 Grand Valley State University
#
##########################################################################


#
# And
#
BEGIN and
  INPUTS
    InputA [0x0000, 0xFFFF]
    InputB [0xABCD, 0x1234, 0x0001, 0xFFFE]
    Op 2
  OUTPUTS 
    Output [0x0000, 0x0000, 0x0000, 0x0000,
    	    0xABCD, 0x1234, 0x0001, 0xFFFE]
    Overflow 0

#
# Or
#
BEGIN or
  INPUTS
    InputA [0x0000, 0xFFFF]
    InputB [0xABCD, 0x1234, 0x0001, 0xFFFE]
    Op 3
  OUTPUTS 
    Output [0xABCD, 0x1234, 0x0001, 0xFFFE,
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF]
    Overflow 0

#
# Not
#
BEGIN not
  INPUTS
    InputA [0x0000, 0xFFFF, 0xFF00]
    InputB [0xABCD, 0x1234]
    Op 4
  OUTPUTS 
    Output [0xFFFF, 0xFFFF,
            0x0000, 0x0000,
	    0x00FF, 0x00FF]
    Overflow 0

#
# Xor
#
BEGIN xor
  INPUTS
    InputA [0x0000, 0xFFFF]
    InputB [0xABCD, 0x1234, 0xF0F0, 0xFFFF]
    Op 5
  OUTPUTS 
    Output [0xABCD, 0x1234, 0xF0F0, 0xFFFF,
            0x5432, 0xEDCB, 0x0F0F, 0x0000]
    Overflow 0

#
# lui
#
BEGIN lui
   INPUTS
     InputA [0x0000, 0xFFFF, 0x1234]
     InputB [0x1234, 0xF0F0, 0x4567]
     Op 6
  OUTPUTS
    Output [0x0000, 0x0000, 0x0000,
            0xFF00, 0xFF00, 0xFF00,
	    0x3400, 0x3400, 0x3400]
    Overflow 0


#
# slt
#
BEGIN slt
  INPUTS
    InputA SIGNED(16) [-2^14, -1, 1, 2^14-1]
    InputB SIGNED(16) [-2^14, -1, 1, 2^14-1, 0, 2^12, -3098, 15]

    Op 15
  OUTPUTS
    Output [0, 1, 1, 1,
 1, 1, 1, 1, 
	    0, 0, 1, 1,
 1, 1, 0, 1, 
	    0, 0, 0, 1,
 0, 1, 0, 1, 
	    0, 0, 0, 0, 0, 0, 0, 0]
    Overflow 0

#
# sltu
#
BEGIN sltu
  INPUTS
    InputA [0, 1, 2^15-1, 20018, 2^14-2, 2^16 - 1]

    InputB [0, 1, 2^15-1, 2^14, 2^14-1, 398, 2^16 - 1, 2^16 - 4, 2^15]

    Op 7
  OUTPUTS
    Output [0, 1, 1, 1, 1, 1
, 1, 1, 1, 
	    0, 0, 1,
 1, 1, 1, 1, 1, 1, 
	    0, 0, 0, 0, 0, 0, 1, 1, 1, 
	    0, 0, 1, 0, 0, 0, 1, 1, 1, 
	    0, 0, 1, 1, 1, 0, 1, 1, 1, 
	    0, 0, 0, 0, 0, 0, 0, 0, 0]
    Overflow 0


#
# Add
#
BEGIN add
  INPUTS
    InputA SIGNED(16) [-5, 7, 1000]
    InputB SIGNED(16) [-8, 4]
    Op 8
  OUTPUTS
    Output SIGNED(16) [-13, -1, -1, 11, 992, 1004]
    Overflow 0


BEGIN add_withOverflow
  INPUTS
    InputA SIGNED(16) [2^15-2, 2^15-1, 2^14]
    InputB SIGNED(16) [1, 2]
    Op 8
  OUTPUTS
    Output SIGNED(16) [2^15-1, -2^15, -2^15, -2^15+1, 2^14 + 1, 2 ^ 14 + 2]
    Overflow [0, 1, 1, 1, 0, 0]


#
# sub
#
BEGIN sub
  INPUTS
    InputA SIGNED(16) [-5, 7, 37, 100, -100, 0]
    InputB SIGNED(16) [-8, 4, 2^15 - 100]
    Op 9
  OUTPUTS
    Output SIGNED(16) [3, -9, -2^15 + 95, 15, 3, -2^15 + 107, 45, 33, -2^15 + 137, 108, 96, -2^15 + 200, -92, -104, -2^15, 8, -4, -2^15 + 100]
    Overflow 0


BEGIN sub_withOverflow
  INPUTS
    InputA SIGNED(16) [-2^15, -2^15+1, -2 ^14]
    InputB SIGNED(16) [1, 2]
    Op 9
  OUTPUTS
    Output SIGNED(16) [2^15-1, 2^15-2, -2^15, 2^15-1, -2^14 - 1, -2^14 -2]
    Overflow [1, 1, 0, 1, 0, 0]



#
# Addu
#
BEGIN addu
  INPUTS
    InputA [1, 2^15]
    InputB [3, 2^14+7, 2^15 - 1]
    Op 0
  OUTPUTS
    Output [4, 2^14+8, 2^15, 2^15+3, 0xC007, 2^16 - 1 ] 
    Overflow 0


BEGIN addu_withOverflow
  INPUTS
    InputA [2^15-1, 2^16-2, 2^16-1]
    InputB [1, 2, 100]
    Op 0
  OUTPUTS
    Output [2^15, 2^15+1, 2^15 + 99, 2^16-1, 0, 98, 0, 1, 99]
    # Overflow is always 0 for addu
    Overflow 0


#
# subu
#
BEGIN subu
  INPUTS
    InputA [15, 9, 37, 100, 8]
    InputB [8, 4]
    Op 1
  OUTPUTS
    Output [7, 11, 1, 5, 29, 33, 92, 96, 0, 4]
    Overflow 0


BEGIN sub_withOverflow
  INPUTS
    InputA [1, 2^16-2, 10]
    InputB [3, 2^16-1]
    Op 1
  OUTPUTS
    Output [0xFFFE, 2, 2^16-5, 0xFFFF, 7, 11] 
    # overflow is always 0 for subu
    Overflow 0

BEGIN sub_withOverflow2
  INPUTS
    InputA [2^15-1, 2^15+1, 2^16 - 1]
    InputB [2^15-1, 2^15+1]
    Op 1
  OUTPUTS
    Output [0, 0xFFFE, 2, 0, 2^15, 2^15 -2 ]
    # overflow is always 0 for subu
    Overflow 0
